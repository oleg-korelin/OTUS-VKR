
Процедура ПриЗаписиСправочника1ПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ИсхДанные = Источник.Ссылка;
	Сериализатор.ЗаписатьJSON(Запись, ИсхДанные.ПолучитьОбъект(), НазначениеТипаXML.Явное);
	ТекстСообщения = Запись.Закрыть();
	СправочникОбъект = Справочники .ИсходящиеСообщенияRMQ.СоздатьЭлемент();
	СправочникОбъект.Сообщение = ТекстСообщения;
	СправочникОбъект.ИмяОчереди = "reference1";
	СправочникОбъект.ТочкаОбмена  = "references";
	СправочникОбъект.КлючМаршрутизации = "reference1";
	СправочникОбъект.КОтправке = Истина;
	СправочникОбъект.Записать();
КонецПроцедуры

Процедура ПриЗаписиСправочника2ПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ИсхДанные = Источник.Ссылка;
	Сериализатор.ЗаписатьJSON(Запись, ИсхДанные.ПолучитьОбъект(), НазначениеТипаXML.Явное);
	ТекстСообщения = Запись.Закрыть();
	СправочникОбъект = Справочники .ИсходящиеСообщенияRMQ.СоздатьЭлемент();
	СправочникОбъект.Сообщение = ТекстСообщения;
	СправочникОбъект.ИмяОчереди = "reference2";
	СправочникОбъект.ТочкаОбмена  = "references";
	СправочникОбъект.КлючМаршрутизации = "reference2";
	СправочникОбъект.КОтправке = Истина;
	СправочникОбъект.Записать();
КонецПроцедуры

Процедура ВыполнитьОтправкуСообщений() Экспорт
	
	ЗаписьЖурналаРегистрации("RabbitMQ", УровеньЖурналаРегистрации.Информация, , , "Начало регламентного задания.");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеСообщенияRMQ.Сообщение КАК Сообщение,
		|	ИсходящиеСообщенияRMQ.ТочкаОбмена КАК ТочкаОбмена,
		|	ИсходящиеСообщенияRMQ.ИмяОчереди КАК ИмяОчереди,
		|	ИсходящиеСообщенияRMQ.КлючМаршрутизации КАК КлючМаршрутизации,
		|	ИсходящиеСообщенияRMQ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИсходящиеСообщенияRMQ КАК ИсходящиеСообщенияRMQ
		|ГДЕ
		|	ИсходящиеСообщенияRMQ.КОтправке";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации("RabbitMQ", УровеньЖурналаРегистрации.Информация, , , "Есть сообщения к отправке.");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПроверитьПодключениеСервер();
			ТекстСообщения = Выборка.Сообщение;
			ТочкаОбмена = Выборка.ТочкаОбмена;
			ИмяОчереди = Выборка.ИмяОчереди;
			КлючМаршрутизации = Выборка.КлючМаршрутизации;
			СозданиеТочкиИОчередиСервер(ТочкаОбмена, ИмяОчереди);
			КлиентКомпоненты = ПолучитьКомпонентуСервер();
			РезультатОтправки = ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ТекстСообщения, ТочкаОбмена, ИмяОчереди, КлючМаршрутизации);
			Если РезультатОтправки Тогда
				  СпрОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
				  СпрОбъект.КОтправке = Ложь;
				  СпрОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры // ВыполнитьОтправкуСообщений()

Процедура СозданиеТочкиИОчередиСервер(ТочкаОбмена, ИмяОчереди) Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, ТочкаОбмена, ИмяОчереди);
	
КонецПроцедуры

Процедура ПроверитьПодключениеСервер() Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты);
	
КонецПроцедуры

Функция ПолучитьКомпонентуСервер() Экспорт
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпоновкиНаСервере();
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

Функция ПолучитьАдресМакетаКомпоновкиНаСервере()
	
	МакетВнешнейКомпоненты    = ПолучитьОбщийМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПроверитьПодключениеКлиентСервер(КлиентКомпоненты)
	
	Попытка
		КлиентКомпоненты.Connect(
		"localhost", // Адрес,
		5672, // Порт,
		"guest", // Логин,
		"guest", // Пароль,
		"/"); // ВиртуальныйХост);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ЗаписьЖурналаРегистрации("RabbitMQВыгрузка", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		// ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить(НСтр("ru = 'Подключение успешно выполнено!'"));
	
КонецПроцедуры

Процедура СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, ТочкаОбмена, ИмяОчереди)
	
	Попытка
		КлиентКомпоненты.Connect(
		"localhost", // Адрес,
		5672, // Порт,
		"guest", // Логин,
		"guest", // Пароль,
		"/"); // ВиртуальныйХост);
		
		КлиентКомпоненты.DeclareExchange(ТочкаОбмена, "topic", Ложь, Истина, Ложь);
		КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
		// КлиентКомпоненты.BindQueue(ИмяОчереди, ТочкаОбмена, "#" + ИмяОчереди + "#");
		КлиентКомпоненты.BindQueue(ИмяОчереди, ТочкаОбмена, ИмяОчереди);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка создания точек и очередей!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ЗаписьЖурналаРегистрации("RabbitMQВыгрузка", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		// ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	//Сообщить("Точки и очереди успешно созданы!");
КонецПроцедуры

Функция ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ТекстСообщения, ТочкаОбмена, ИмяОчереди, КлючМаршрутизации) Экспорт
	
	СообщениеОтправлено = Ложь;
	
	Попытка
		КлиентКомпоненты.Connect(
		"localhost", // Адрес,
		5672, // Порт,
		"guest", // Логин,
		"guest", // Пароль,
		"/"); // ВиртуальныйХост);
		
		КлиентКомпоненты.BasicPublish(
			ТочкаОбмена,
			КлючМаршрутизации,
			ТекстСообщения,
			1,
			Ложь);
		СообщениеОтправлено = Истина;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ЗаписьЖурналаРегистрации("RabbitMQВыгрузка", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		// ВызватьИсключение ТекстСообщения;
		СообщениеОтправлено = Ложь;
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации("RabbitMQВыгрузка", УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
	//Сообщить("Сообщение успешно отправлено!"); 
	
	Возврат СообщениеОтправлено;
КонецФункции
