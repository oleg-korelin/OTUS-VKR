
Процедура ВыполнитьПолучениеСообщений() Экспорт

	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты);

КонецПроцедуры // ВыполнитьПолучениеСообщений()

Процедура ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты) Экспорт
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИменаОчередейRMQ.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ИменаОчередейRMQ КАК ИменаОчередейRMQ
		|ГДЕ          
		|	НЕ ИменаОчередейRMQ.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Попытка
			КлиентКомпоненты.Connect(
			"localhost", // Адрес,
			5672, // Порт,
			"guest", // Логин,
			"guest", // Пароль,
			"/"); // ВиртуальныйХост);
			
			
			
			Пока Выборка.Следующий() Цикл
				ИмяОчереди = Выборка.Наименование;
				
				Попытка
					//КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
					
					Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
					
					ОтветноеСообщение = "";
					Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
						КлиентКомпоненты.BasicAck();
						ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
						
						
						Если  ИмяОчереди =  "reference3" Тогда
							Сообщить(ОтветноеСообщение);
							
						КонецЕсли;
						
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(ОтветноеСообщение);
						//ЗначениеОбъект = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
						//ЧтениеJSON.Закрыть();
						//
						//ЗначениеОбъект.ОбменДанными.Загрузка = Истина;
						//ЗначениеОбъект.Комментарий = "Создан загрузкой из RMQ.";
						//ЗначениеОбъект.Записать();
					КонецЦикла;	
					
					КлиентКомпоненты.BasicCancel("");
				Исключение
					ВызватьИсключение КлиентКомпоненты.GetLastError();
				КонецПопытки;
			КонецЦикла;
			
		Исключение
			СистемнаяОшибка = ОписаниеОшибки();
			ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
			ЗаписьЖурналаРегистрации("RabbitMQЗагрузка", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция ПрочитатьСообщениеКлиентСерверФунк(КлиентКомпоненты) Экспорт
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИменаОчередейRMQ.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ИменаОчередейRMQ КАК ИменаОчередейRMQ
		|ГДЕ          
		|	НЕ ИменаОчередейRMQ.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтветноеСообщение1 = "";
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Попытка
			КлиентКомпоненты.Connect(
			"localhost", // Адрес,
			5672, // Порт,
			"guest", // Логин,
			"guest", // Пароль,
			"/"); // ВиртуальныйХост);
			
			
			
			Пока Выборка.Следующий() Цикл
				ИмяОчереди = Выборка.Наименование;
				
				Попытка
					
					Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
					
					ОтветноеСообщение = "";
					Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
						КлиентКомпоненты.BasicAck();
						ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
						
						
						Если  ИмяОчереди =  "reference3" Тогда
							ОтветноеСообщение1 = ОтветноеСообщение;
							
						КонецЕсли;
						
						//ЧтениеJSON = Новый ЧтениеJSON;
						//ЧтениеJSON.УстановитьСтроку(ОтветноеСообщение);
						//ЗначениеОбъект = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
						//ЧтениеJSON.Закрыть();
						//
						//ЗначениеОбъект.ОбменДанными.Загрузка = Истина;
						//ЗначениеОбъект.Комментарий = "Создан загрузкой из RMQ.";
						//ЗначениеОбъект.Записать();
					КонецЦикла;	
					
					КлиентКомпоненты.BasicCancel("");
				Исключение
					ВызватьИсключение КлиентКомпоненты.GetLastError();
				КонецПопытки;
			КонецЦикла;
			
		Исключение
			СистемнаяОшибка = ОписаниеОшибки();
			ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
			ЗаписьЖурналаРегистрации("RabbitMQЗагрузка", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОтветноеСообщение1;
	
КонецФункции


Функция ПолучитьКомпонентуСервер() Экспорт
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере();
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

Функция ПолучитьАдресМакетаКомпановкиНаСервере()
	
	МакетВнешнейКомпоненты    = ПолучитьОбщийМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции